#!/bin/bash

# import {{{
if [[ -f "$(pwd)/common" ]]; then
	source common
else
	print_error 'missing file: common'
fi

if [[ -f "$(pwd)/utilities" ]]; then
	source utilities
else
	print_error 'missing file: utilities'
fi
# }}}

check_multilib(){ #{{{
	local architect="$(uname -m)"

	print_progress 'Enable 32-bit application on 64-bit system'

	if [[ $architect == x86_64 ]]; then
		local has_multilib="$(grep -n "\[multilib\]" /etc/pacman.conf | cut -f1 -d:)" # get line number contains "[multilib]"
		if [[ -z "$has_multilib" ]]; then
			echo '[multilib]' >> /etc/pacman.conf
			echo 'Include = /etc/pacman.d/mirrorlist' >> /etc/pacman.conf
		else
			sed -i "${has_multilib}s/^#//" /etc/pacman.conf
			local has_multilib=$((${has_multilib} + 1))
			sed -i "${has_multilib}s/^#//" /etc/pacman.conf
		fi
	fi
}
# }}}
update_bootloader() { # {{{
	# cannot run os-prober to detect other os when using arch-chroot in install script
	# because grub-mkconfig fails to connect to lvmetad. You have to reboot to make it works
	print_progress 'Update bootloader to detect other os (useful when dual-boot)'

	install_package os-prober
        if [[ ! -f /boot/grub/grub.cfg.aui ]]; then
		cp -v /boot/grub/grub.cfg /boot/grub/grub.cfg.aui
		os-prober
		grub-mkconfig -o /boot/grub/grub.cfg
	fi
}
# }}}
configure_sudo() { # {{{
	print_progress 'Configure sudo'

	install_package 'sudo'

	if [[ ! -f /etc/sudoers.aui ]]; then
		cp -v /etc/sudoers /etc/sudoers.aui

		# uncomment to allow members of group wheel to execute any command
		sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /etc/sudoers

		# This config is especially helpful for those using terminal multiplexers like screen, tmux, or ratpoison, and those using sudo from scripts/cronjobs:
		echo "" >> /etc/sudoers
		echo 'Defaults !requiretty, !tty_tickets, !umask' >> /etc/sudoers
		echo 'Defaults visiblepw, path_info, insults, lecture=always' >> /etc/sudoers
		echo 'Defaults loglinelen=0, logfile =/var/log/sudo.log, log_year, log_host, syslog=auth' >> /etc/sudoers
		echo 'Defaults passwd_tries=3, passwd_timeout=1' >> /etc/sudoers
		echo 'Defaults env_reset, always_set_home, set_home, set_logname' >> /etc/sudoers
		echo 'Defaults !env_editor, editor="/usr/bin/nvim:/usr/bin/vi:/usr/bin/nano"' >> /etc/sudoers
		echo 'Defaults timestamp_timeout=15' >> /etc/sudoers
		echo 'Defaults passprompt="[sudo] password for %u: "' >> /etc/sudoers
		echo 'Defaults lecture=never' >> /etc/sudoers
	fi
}
# }}}
install_requirements() { # {{{
	print_progress 'Install script dependencies'

	setup_console_font

	# install figlet to draw big ascii title
	install_package 'figlet'

	install_package 'vim xdg-user-dirs'
}
# }}}

install_theme() { # {{{
	print_progress 'Install theme and icon for desktop environment'
        install_package 'breeze-gtk cantarell-fonts'
	git clone https://github.com/DraGiuS/Skel
	cd Skel
	cp wallhaven-614476.jpg /home
	cp wallhaven-355344.png /home
	cp wallhaven-275413.jpg /home
	cp wall.jpg /home
	mkdir -p /usr/share/aurorae/themes
	cp -r Formvolvere /usr/share/aurorae/themes
        mkdir -p /usr/share/plasma/desktoptheme
        cp -r 'Aex Nomad' /usr/share/plasma/desktoptheme/
	cp -r 'Aex Nomad Dark' /usr/share/plasma/desktoptheme/
	mkdir -p /usr/share/icons
	cp -r TurkinOS /usr/share/icons/
	cd etc/skel
	cp wallhaven-698231.jpg /home
	cp -r .config /etc/skel
	cp -r .local /etc/skel
	cp -r raleway /usr/share/fonts
	
	enter_to_continue
}
# }}}

create_user_account() { # {{{
	print_title 'ACCOUNT'
	print_info 'Create your user account'

	read -p 'Username: ' USERNAME
	useradd -m -g users -G wheel -s /bin/bash "$USERNAME"
	passwd "$USERNAME"
        mkdir /home/"$USERNAME"/.config/conky
	mkdir /home/"$USERNAME"/.config/autostart
        cd Skel/etc/skel
	cp -r Elegance-Beam /home/"$USERNAME"/.config/conky/
        cp conky.desktop /home/"$USERNAME"/.config/autostart/
	cp .zshrc /home/"$USERNAME"/
	cd ..
	cd ..
	cp PKGBUILD /home/"$USERNAME"/
	mkdir -p /home/"$USERNAME"/.local/share/color-schemes/
	cp OneDark.colors /home/"$USERNAME"/.local/share/color-schemes/
	mkdir -p /usr/share/themes
        cp -r 'darkaneon blue' /usr/share/themes/
	cd /home/"$USERNAME"
	mkdir Bureau
	mkdir Documents
	mkdir Jeux
	mkdir 'Github Projects'
	mkdir Images
	mkdir Téléchargements
	mkdir Vidéos
	chmod -R 777 Bureau Documents Jeux 'Github Projects' Images Téléchargements Vidéos
		
	enter_to_continue
}
# }}}

set_your_keyboard_layout() { # {{{
         print_title 'KEYBOARD LAYOUT'
	 print_info 'fr for french layout'
	 print_info 'Set your keyboard layout'
	 
	 read -p 'Layout: ' LAYOUT
       	 localectl set-x11-keymap  "$LAYOUT"
	 
	 enter_to_continue
}
# }}}

install_aur_helper() { # {{{
	print_title 'AUR HELPER'
	print_info "AUR helpers automate certain tasks for using the Arch User Repository. Most helpers automate the process of retrieving a package's PKGBUILD from the AUR and building the package."

	if [[ "$(pacman -Qs trizen)" == '' ]]; then
		echo
		print_progress 'Install trizen..'
		# running makepkg as root is not allowed as it can cause permanent, catastrophic damage to your system
		su --login "$USERNAME" -c '
		mkdir -p /tmp/aui_packages
		cd /tmp/aui_packages
		curl -o PKGBUILD https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=trizen
		makepkg --install --clean --syncdeps --needed --noconfirm PKGBUILD
		'
	else
		print_warning 'trizen has already been installed'
	fi

	enter_to_continue
}
# }}}
install_base() { # {{{
	print_progress 'Install networkmanager'
	install_package 'networkmanager'

	if [[ "$(pacman -Qs networkmanager)" != '' ]]; then
		# disable dhcpcd used when installing live (cant have 2 managers run at the same time)
		systemctl stop dhcpcd
		systemctl disable dhcpcd
		systemctl enable NetworkManager.service
	fi

	print_progress 'Install bluetooth'
	install_package 'bluez bluez-utils pulseaudio-bluetooth'

	print_progress 'Install audio stuff'
	install_package 'pulseaudio pulseaudio-alsa'

	print_progress 'Install ntfs-3g filesystem to read/write Window files from linux'
	install_package 'ntfs-3g'

	print_progress 'Install unikey'
	install_package 'ibus-unikey'

	print_progress 'Install codecs for multimedia'
	install_package 'gstreamer gst-plugins-ugly gst-plugins-good gst-plugins-bad gst-plugins-base'

	print_progress 'Install other utility apps'
	install_package 'libreoffice-fresh gimp reflector openssh'

	print_progress 'Install shell utilities'
	install_package 'bash-completion ripgrep fd trash-cli'

	enter_to_continue
}
# }}}

install_pf() { # {{{

echo -n "Is your computer from skylake or silvermont generation ? If not then choose generic (skylake/silvermont/generic): "
read answer
if [ "$answer" = 'skylake' ]
then
wget https://download.opensuse.org/repositories/home:/post-factum:/kernels/Arch/x86_64/linux-pf-headers-skylake-4.19.4-1-x86_64.pkg.tar.xz
wget https://download.opensuse.org/repositories/home:/post-factum:/kernels/Arch/x86_64/linux-pf-skylake-4.19.4-1-x86_64.pkg.tar.xz

elif [ "$answer" = 'silvermont' ]
then
wget https://download.opensuse.org/repositories/home:/post-factum:/kernels/Arch/x86_64/linux-pf-headers-silvermont-4.19.4-1-x86_64.pkg.tar.xz
wget https://download.opensuse.org/repositories/home:/post-factum:/kernels/Arch/x86_64/linux-pf-silvermont-4.19.4-1-x86_64.pkg.tar.xz

elif [ "$answer" = 'generic' ]
then
wget https://download.opensuse.org/repositories/home:/post-factum:/kernels/Arch/x86_64/linux-pf-headers-generic-4.19.4-1-x86_64.pkg.tar.xz
wget https://download.opensuse.org/repositories/home:/post-factum:/kernels/Arch/x86_64/linux-pf-generic-4.19.4-1-x86_64.pkg.tar.xz
fi

pacman -U *.pkg.tar.xz
grub-mkconfig -o /boot/grub/grub.cfg

echo "Kernel succesfully installed"

enter_to_continue 

}
# }}}

setup_vim() { # {{{
	local home="/home/$USERNAME"

	if [[ -e "$home/.vim/setup.sh" ]]; then
		print_progress 'Setup vim config files'
		su --login "$USERNAME" -c "$home/.vim/setup.sh"
	else
		print_warning 'Vim setup file not found'
	fi
}
# }}}

setup_dotfiles() { # {{{
	local home="/home/$USERNAME"

	print_title 'DOTFILES'
	print_progress 'Set up dotfiles...'

	su --login "$USERNAME" -c "git clone --recursive https://github.com/NearHuscarl/dotfiles /tmp/dotfiles"

	if [[ ! -e /tmp/dotfiles  ]]; then
		print_warning "Cannot download dotfiles"
		return
	fi

	for file in $(find /tmp/dotfiles ! -path . | sed "s|^\./||"); do
		if [ -e "$home/$file" ] && [ ! -d "$home/$file" ]; then
			print_warning "$home/$file will be overwrited"
		fi
	done

	confirm_yes "Confirm copy dotfiles to $home"

	if [[ "$OPTION" != n ]]; then
		shopt -s dotglob # cp * <dest> will include dot files
		cp -af --verbose /tmp/dotfiles/* "$home"
		setup_vim
	fi

	rm -rd /tmp/dotfiles

	enter_to_continue
}
# }}}

install_display_manager() { # {{{
	print_progress 'Install display manager'
	install_package 'sddm'
	
	systemctl enable sddm
	sddm --example-config > /etc/sddm.conf
	sed -i 's/Current=/Current=sddm-sugar-light/' /etc/sddm.conf
	sed -i 's/CursorTheme=/CursorTheme=breeze_cursors/' /etc/sddm.conf
	sed -i 's/Numlock=none/Numlock=on/' /etc/sddm.conf
        cd /usr/share/sddm/themes
        git clone https://github.com/MarianArlt/sddm-sugar-light
}
# }}}

set_desktop_environment() { # {{{
	local desktop_envs

	OPTION=n
	while [[ "$OPTION" != y ]]; do
		print_title 'DESKTOP ENVIRONMENT'
		print_info 'A DE provide a complete GUI for a system by bundling together a variety of X clients written using a common widget toolkit and set of libraries.'
		print_info "A window manager is one component of a system's graphical user interface."

		desktop_envs=(KDE XFCE I3)
		select opt in "${desktop_envs[@]}"; do
			if contains_element "${opt}" "${desktop_envs[@]}"; then
				DESKTOP_ENVIRONMENT="$opt"
				break
			else
				invalid_option
			fi
		done
		confirm "Confirm desktop environtment ($DESKTOP_ENVIRONMENT)"
	done
}
# }}}

kde_unstable() { # {{{
                print_title 'KDE UNSTABLE'
                print_info 'If you want KDE unstable you gonna install it'
	       
	        cp /root/arch_installer/pacman.conf /etc/pacman.conf
	        pacman-key -r CBAE582A876533FD
		pacman-key --lsign-key CBAE582A876533FD
		pacman -Syy
}
# }}}
		
install_desktop_environment() { # {{{

	if [[ "$DESKTOP_ENVIRONMENT" != '' ]]; then
		confirm_yes "Use default ($DESKTOP_ENVIRONMENT)"
		if [[ "$OPTION" == n ]]; then
			set_desktop_environment
		fi
		print_progress 'Installing X-Server (req. for Desktopenvironment, GPU Drivers, Keyboardlayout,...)'
	        install_package 'xorg xorg-xinit'
	else
		set_desktop_environment
	fi

	case "$DESKTOP_ENVIRONMENT" in
		KDE)
			install_package 'plasma-desktop plasma-wayland-session' # minimum plasma DE
			install_package 'sddm' # display manager
			install_package 'ark' # archive
			install_package 'konsole yakuake' # terminal
			install_package 'bluedevil' # bluetooth for KDE
			install_package 'plasma-nm' # networkmanager for KDE
			install_package 'plasma-pa' # pulseaudio for KDE
			install_package 'kinfocenter' # see system information
			install_package 'spectacle' # screenshot utility
			install_package 'kcolorchooser' # color picker on desktop screen
			install_package 'plasma5-applets-redshift-control' # redshift applet for KDE
			install_package 'sddm-kcm' # sddm config gui for KDE
			install_package 'latte-dock' # dock for KDE
			install_package 'qalculate-gtk' # calculator	
			install_package 'plasma-vault' # encryption
			install_package 'wget qt5 plasma-browser-integration yarn powerdevil kde-gtk-config kio-gdrive kdeconnect kscreen' # like the package name say
	                install_package 'flatpak flatpak-builder bullet system-config-printer cups telegram-desktop hplip gparted linux-headers virtualbox virtualbox-host-dkms lutris steam obs-studio dolphin-emu pycharm-community-edition' # Stuff
		        install_aur_package 'libcurl3-gnutls' # Fix gog games
			install_package 'vivaldi discord-canary libreoffice-extension-languagetool chromium-widevine spotify dropbox jetbrains-toolbox rambox-bin' #Disastrouaur
		        sed -i 's/#MAKEFLAGS="-j2"/MAKEFLAGS="-j$(nproc)"/' /etc/makepkg.conf # Fix the slow speed compilation
			mount -o remount,size=15G /tmp/ # Fix the needed space to build big packages such as emulators
			install_aur_package 'snapd mauikit-git lgogdownloader wine-valve-git figma-linux-bin onivim-git netflix-qdesktop blender-2.8-git rpcs3-git vscodium plasma5-applets-volumewin7mixer intellij-idea-ce-eap gravit-designer-bin spiral-knights webtorrent-desktop git-it evince-no-gnome evesetup youtube-dl-gui-git ardour-git conky-lua emulationstation itch-bin kwin-scripts-quarter-tiling-git meshroom-bin gamehub-git mellowplayer streamlink-twitch-gui pamac-aur-git unityhub lwks-beta yuzu-canary-git cemu headset-bin' # My stuff
			flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo 
			flatpak install flathub fr.natron.Natron
			systemctl start snapd.socket
			sleep 7
			systemctl enable snapd.socket
			snap refresh
			snap install zenkit
			snap install --edge gitkraken
			snap install auryo
			snap install polarr
			snap install --beta boa
			snap install bitwarden
			snap install --beta plexmediaserver
			systemctl enable org.cups.cupsd.service    
			sudo systemctl enable bluetooth.service
			cd /root/arch_installer
			cp browser.html /opt/vivaldi/resources/vivaldi
			cp custom.css /opt/vivaldi/resources/vivaldi/style
			sed -i 's/'#AutoEnable=false'/'AutoEnable=true'/g' /etc/bluetooth/main.conf

			
			
			setup_xinitrc 'startkde'
			;;
		XFCE)
			install_package 'xfce4 xfce4-goodies xarchiver'
			setup_xinitrc 'startxfce4'
			;;
		I3)
			install_package 'nitrogen' # wallpaper app
			install_package 'termite' # terminal
			install_aur_package 'polybar' # a highly customizable taskbar
			install_aur_package 'vtop' # a console task manager with vim-like shortcuts
			install_package 'ranger' # a console file manager
			install_package 'rofi' # menu to launch anything you want
			install_package 'gnome-calculator' # calculator
			install_package 'zathura' # pdf reader
			install_aur_package 'dunstify' # notification manager, like dunst but have --replace option https://github.com/NearHuscarl/dotfiles/blob/7ae6df76ca9f87a87bf68f2a38775e0ab9a4de04/bin/volume#L82
			install_package 'sxiv' # image viewer
			install_package 'compton' # compositor

			setup_xinitrc 'i3'
			;;
	esac

	install_display_manager

	enter_to_continue
}
# }}}

install_gog_games() { # {{{
        print_title 'INSTALL MY GOG GAMES'
	print_title 'please set up your account'
	lgogdownloader
	lgogdownloader --list
	print_info 'please type your favorites games'
        read -p 'Game: ' GAME
	print_info 'please set your user'
	read -p 'User: ' USER
	cd /home/
	mkdir gog
	lgogdownloader --download --directory /home/gog --game "$GAME" 
	cd gog && cd "$GAME"
        su  "$USER" ./*sh
        cd ..
	read -p 'Game: ' GAME
        lgogdownloader --download --directory /home/gog --game "$GAME" 
	cd "$GAME"
        su  "$USER" ./*sh
        cd ..
	read -p 'Game: ' GAME
        lgogdownloader --download --directory /home/gog --game "$GAME" 
	cd "$GAME"
        su  "$USER" ./*sh
        cd ..
	read -p 'Game: ' GAME
	lgogdownloader --download --directory /home/gog --game "$GAME" 
	cd "$GAME"
        su  "$USER" ./*sh
        cd ..
	read -p 'Game: ' GAME 
	lgogdownloader --download --directory /home/gog --game "$GAME" 
        cd "$GAME"
        su  "$USER" ./*sh
        cd ..
	read -p 'Game: ' GAME 
	lgogdownloader --download --directory /home/gog --game "$GAME" 
        cd "$GAME"
        su  "$USER" ./*sh
        cd ..
	read -p 'Game: ' GAME 
	lgogdownloader --download --directory /home/gog --game "$GAME" 
        cd "$GAME"
        su  "$USER" ./*sh
        cd ..
	lgogdownloader --download --directory /home/gog --game the_swords_of_ditto
	cd the_swords_of_ditto
	su  "$USER" ./*sh
	cd ..
        lgogdownloader --download --directory /home/gog --game devil_daggers
	cd devil_daggers
	su  "$USER" ./*sh
	cd ..
	lgogdownloader --download --directory /home/gog --game the_coma_recut
	cd the_coma_recut
	su  "$USER" ./*sh
	cd ..
	lgogdownloader --download --directory /home/gog --game war_for_the_overworld
	cd war_for_the_overworld
	su  "$USER" ./*sh
	cd .. 
        lgogdownloader --download --directory /home/gog --game layers_of_fear
	cd layers_of_fear
	su  "$USER" ./*sh
	cd ..
        lgogdownloader --download --directory /home/gog --game crypt_of_the_necrodancer
	cd crypt_of_the_necrodancer
	su  "$USER" ./*sh
	cd ..
	lgogdownloader --download --directory /home/gog --game breach_clear_deadline
	cd breach_clear_deadline
	su  "$USER" ./*sh
	cd ..
        lgogdownloader --download --directory /home/gog --game shadow_warrior_complete
        cd shadow_warrior_complete  
	su  "$USER" ./*sh
	cd ..
	lgogdownloader --download --directory /home/gog --game we_are_the_dwarves
	cd we_are_the_dwarves
	su  "$USER" ./*sh
	
        enter_to_continue
}
# }}}

install_translation() { # {{{
        print_title 'TRANSLATION'
	print_info 'type fr for french translation'
	read -p 'Translation: ' TRANSLATION
	install_package libreoffice-fresh-"$TRANSLATION"
	install_package gimp-help-"$TRANSLATION"
	
	enter_to_continue
}
# }}}
	
install_fonts() { # {{{
	print_progress 'Install some nice fonts'

	install_aur_package 'ttf-material-icons'
	install_package 'ttf-inconsolata ttf-roboto ttf-font-awesome'
		
	enter_to_continue
}
# }}}

setup_zsh() { # {{
        print_title 'ZSH'
        print_info 'It will set up zsh with powerlevel9k theme'
        install_package 'zsh powerline-fonts'
	read -p 'USER: ' USER
	git clone https://github.com/bhilburn/powerlevel9k.git /home/$USER/powerlevel9k
	chsh "$USER" --shell /bin/zsh
	
	
	enter_to_continue
}
# }}}

setup_bumblebee() { # {{
        print_title 'BUMBLEBEE'
	print_info 'It will install bumblebee for u'
	install_package 'bumblebee winetricks esa-demos bbswitch-dkms primus lib32-primus intel-dri xf86-video-intel nvidia-dkms nvidia-utils lib32-nvidia-utils lib32-intel-dri'
	read -p 'USER: ' USER
	gpasswd -a "$USER" bumblebee
	cp /root/arch_installer/bumblebee.conf /etc/bumblebee/bumblebee.conf
	systemctl enable bumblebeed 
	
	enter_to_continue
}
# }}}

ending_script() { # {{
    print_info 'Installing needed applets'
    read -p 'USER: ' USER
    git clone https://github.com/dragius/skel /home/"$USER"/skel
    cd /home/"$USER"/skel
    su  "$USER" ./installapplet.sh
    su - "$USER" -c "makepkg -si;"

	enter_to_continue
}
# }}}

finish() { # {{{
	print_title "INSTALL COMPLETED"

	confirm 'Reboot system'
	if [[ "$OPTION" == y ]]; then
		reboot
	fi
	exit 0
}
# }}}
install() { # {{{
	local checklist

	checklist=(0 0 0 0 0 0 0 0 0 0 0 0 0)

	while true; do
		print_title 'ARCHLINUX INSTALLER'
                
	    echo "    0. $(mainmenu_item "${checklist[0]}"  'Install themes')"
        echo "    1. $(mainmenu_item "${checklist[1]}"  'Create user account' "$USERNAME")"
		echo "    2. $(mainmenu_item "${checklist[2]}"  'Set keyboard layout' "$LAYOUT")"
		echo "    3. $(mainmenu_item "${checklist[3]}"  'Install AUR helper')"
		echo "    4. $(mainmenu_item "${checklist[4]}"  'Kde unstable')"
		echo "    5. $(mainmenu_item "${checklist[5]}"  'Install desktop environment' "$DESKTOP_ENVIRONMENT")"
		echo "    6. $(mainmenu_item "${checklist[6]}"  'Install your favorites gog games')"
		echo "    7. $(mainmenu_item "${checklist[7]}"  'Install translation')"
		echo "    8. $(mainmenu_item "${checklist[8]}"  'Install base')"
		echo "    9. $(mainmenu_item "${checklist[9]}"  'Install pf lts kernel')"
		echo "   10. $(mainmenu_item "${checklist[10]}"  'Setup dotfiles')"
		echo "   11. $(mainmenu_item "${checklist[11]}" 'Install fonts')"
		echo "   12. $(mainmenu_item "${checklist[12]}" 'Setup of Zsh with powerlevel9k')"
		echo "   13. $(mainmenu_item "${checklist[13]}" 'Install bumblebee for laptop')"
		echo "   14. $(mainmenu_item "${checklist[14]}" 'Ending script')"
		echo "   15. $(mainmenu_item "${checklist[15]}" 'Finish')"
		echo

		read -p "Enter option (0-14): " OPTION

		case "$OPTION" in
			0)
			    install_theme
				checklist[0]=1
				;;
			1)        
				create_user_account
				checklist[1]=1
				;;
			2)	
				set_your_keyboard_layout
				checklist[2]=1
				;;			    
			3)
				install_aur_helper
				checklist[3]=1
				;;
			4)
			        kde_unstable
			        checklist[4]=1
				;;
			5)
				install_desktop_environment
				checklist[5]=1
				;;
		        6)		
				install_gog_games
				checklist[6]=1
				;;
			7)
			        install_translation
				checklist[7]=1
				;;
			8)	
				install_base
				checklist[8]=1
				;;
			9) 
			        install_pf
			        checklist[9]=1
				;;
			10)
				setup_dotfiles
				checklist[10]=1
				;;
			11)
				install_fonts
				checklist[11]=1
				;;
			12)	
				setup_zsh
				checklist[12]=1
				;;
			13)
			        setup_bumblebee
				checklist[13]=1
				;;		
		        14)    
			        ending_script
			        checklist[14]=1
				;;
			15)
				finish
				checklist[15]=1
				;;
			*)
				invalid_option
				;;
		esac
	done
}
# }}}
main() { # {{{
	check_root
	check_archlinux
	check_connection
	check_multilib
	update_pacman_db
	update_bootloader
	configure_sudo
	install_requirements
	install
}
# }}}

main
